/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AucEngineInterface extends utils.Interface {
  functions: {
    "DURATIONTIME()": FunctionFragment;
    "FEE()": FunctionFragment;
    "REQUIRED_SUM()": FunctionFragment;
    "addCandidate(uint256)": FunctionFragment;
    "addVoting(string)": FunctionFragment;
    "candidates(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startVoting(uint256)": FunctionFragment;
    "stopVoting(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(uint256,address)": FunctionFragment;
    "votings(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DURATIONTIME"
      | "FEE"
      | "REQUIRED_SUM"
      | "addCandidate"
      | "addVoting"
      | "candidates"
      | "owner"
      | "renounceOwnership"
      | "startVoting"
      | "stopVoting"
      | "transferOwnership"
      | "vote"
      | "votings"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DURATIONTIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REQUIRED_SUM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addVoting", values: [string]): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "votings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DURATIONTIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REQUIRED_SUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votings", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "VotingCreated(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VotingCreatedEventObject {
  title: string;
}
export type VotingCreatedEvent = TypedEvent<[string], VotingCreatedEventObject>;

export type VotingCreatedEventFilter = TypedEventFilter<VotingCreatedEvent>;

export interface AucEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AucEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DURATIONTIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    REQUIRED_SUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCandidate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVoting(
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidates(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      index: BigNumberish,
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        winner: string;
        title: string;
        maximumVotes: BigNumber;
        endsAt: BigNumber;
        totalAmount: BigNumber;
        started: boolean;
        ended: boolean;
      }
    >;
  };

  DURATIONTIME(overrides?: CallOverrides): Promise<BigNumber>;

  FEE(overrides?: CallOverrides): Promise<BigNumber>;

  REQUIRED_SUM(overrides?: CallOverrides): Promise<BigNumber>;

  addCandidate(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVoting(
    _title: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidates(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startVoting(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopVoting(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    index: BigNumberish,
    _for: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      winner: string;
      title: string;
      maximumVotes: BigNumber;
      endsAt: BigNumber;
      totalAmount: BigNumber;
      started: boolean;
      ended: boolean;
    }
  >;

  callStatic: {
    DURATIONTIME(overrides?: CallOverrides): Promise<BigNumber>;

    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRED_SUM(overrides?: CallOverrides): Promise<BigNumber>;

    addCandidate(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addVoting(_title: string, overrides?: CallOverrides): Promise<void>;

    candidates(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startVoting(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stopVoting(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      index: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        winner: string;
        title: string;
        maximumVotes: BigNumber;
        endsAt: BigNumber;
        totalAmount: BigNumber;
        started: boolean;
        ended: boolean;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VotingCreated(string)"(title?: null): VotingCreatedEventFilter;
    VotingCreated(title?: null): VotingCreatedEventFilter;
  };

  estimateGas: {
    DURATIONTIME(overrides?: CallOverrides): Promise<BigNumber>;

    FEE(overrides?: CallOverrides): Promise<BigNumber>;

    REQUIRED_SUM(overrides?: CallOverrides): Promise<BigNumber>;

    addCandidate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVoting(
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidates(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      index: BigNumberish,
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DURATIONTIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REQUIRED_SUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCandidate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVoting(
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidates(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopVoting(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      index: BigNumberish,
      _for: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
